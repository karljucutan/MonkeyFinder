@using MonkeyFinder.Shared.Models
@using MonkeyFinder.Shared.Models.GeoLocation
@using MonkeyFinder.Shared.Services
@using MonkeyFinder.Shared.Services.Abstractions
@inject IMonkeyService MonkeyService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IGeolocationService GeolocationService

<div>
    @* Fluent UI implementation *@
@*     <FluentButton Appearance="Appearance.Accent" OnClick="@AddMonkey">
        Add Monkey
    </FluentButton>
    <button class="button-yellow" onclick="@FindClosestMonkey">
        Find Closest Monkey
    </button>
    <p>Name: @DialogData.Name - Population: @DialogData.Population </p>

    <FluentStack Orientation="Orientation.Vertical" Gap="1rem">
        @foreach (var monkey in Monkeys)
        {
            <FluentCard MinimalStyle="true" @onclick="() => GoToDetails(monkey)">
                <FluentStack VerticalAlignment="VerticalAlignment.Center">
                    <img class="card-img" src="@monkey.Image" alt="@monkey.Name" style="max-width: 100%; height: auto; width: 6rem;" />
                    <FluentStack Orientation="Orientation.Vertical">
                        <strong>@monkey.Name</strong>
                        <p>@monkey.Location</p>
                    </FluentStack>
                </FluentStack>
            </FluentCard>
        }
    </FluentStack> *@
    <div>
        <button class="button-yellow" @onclick="AddMonkey">Add New Monkey</button>
        <button class="button-yellow" @onclick="FindClosestMonkey">Find Closest Monkey</button>

        @if (Monkeys is null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <ul class="card-list">
                @foreach (var monkey in Monkeys)
                {
                    <li @onclick="()=>GoToDetails(monkey)" class="card-item">
                        <img class="card-image" src="@monkey.Image">
                        <div class="card-content">
                            <h2>@monkey.Name</h2>
                            <p>@monkey.Location</p>
                        </div>
                    </li>
                }
            </ul>
        }
    </div>

</div>

@code {
    [Parameter]
    public List<Monkey> Monkeys { get; set; } = [];

    private Monkey DialogData { get; set; } = new Monkey();

    private async Task AddMonkey()
    {
        var monkey = new Monkey();
        var dialog = await DialogService.ShowDialogAsync<AddMonkeyDialogComponent>(monkey,
            new DialogParameters
                {
                    Title = "Add a New Monkey",
                    PreventDismissOnOverlayClick = true,
                    PreventScroll = true
                });

        var result = await dialog.Result;
        if (!result.Cancelled && result.Data is not null)
        {
            try
            {
                DialogData = (Monkey)result.Data;
                var addMonkeyResult = await MonkeyService.AddMonkeyAsync(DialogData);
                Monkeys.Add(addMonkeyResult);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
        }
    }

    private void GoToDetails(Monkey monkey)
    {
        NavigationManager.NavigateTo($"/monkeydetails/{monkey.Name}");
    }

    private async Task FindClosestMonkey()
    {
        try
        {
            // Get cached location, else get real location.
            var location = await GeolocationService.GetLastKnownLocationAsync();
            if (location is not null)
            {
                location = await GeolocationService.GetCurrentLocationAsync(new GeolocationRequest
                {
                    DesiredAccuracy = GeolocationAccuracy.High,
                    Timeout = TimeSpan.FromSeconds(30)
                });
            }

            // Find closest monkey to us
            var closestMonkey = Monkeys.OrderBy(m => GeolocationService.CalculateDistance(location ?? new(), new Location(m.Latitude, m.Longitude), DistanceUnits.Miles))
                .FirstOrDefault();

            var closestMonkeyMessage = closestMonkey is not null
            ? $"{closestMonkey.Name} is closest, this monkey is in {closestMonkey.Location}"
            : "The closest monkey could not be determined!";

            await DialogService.ShowInfoAsync(closestMonkeyMessage);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Unable to query location: {ex.Message}");
        }
    }
}

