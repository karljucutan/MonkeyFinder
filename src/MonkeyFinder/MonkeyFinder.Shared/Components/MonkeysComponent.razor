@using MonkeyFinder.Shared.Models
@using MonkeyFinder.Shared.Services
@using MonkeyFinder.Shared.Services.Abstractions
@inject IMonkeyService MonkeyService
@inject IDialogService DialogService

<div>
    <FluentButton Appearance="Appearance.Accent" OnClick="@AddMonkey">
        Add Monkey
    </FluentButton>
    <p>Name: @DialogData.Name - Population: @DialogData.Population </p>

    <FluentStack Orientation="Orientation.Vertical" Gap="1rem">
        @foreach (var monkey in Monkeys)
        {
            <FluentCard>
                <FluentStack VerticalAlignment="VerticalAlignment.Center">
                    <img class="card-img" src="@monkey.Image" alt="@monkey.Name" style="max-width: 100%; height: auto; width: 6rem;" />
                    <FluentStack Orientation="Orientation.Vertical">
                        <strong>@monkey.Name</strong>
                        <p>@monkey.Location</p>
                    </FluentStack>
                </FluentStack>
            </FluentCard>
        }
    </FluentStack>
</div>

@code {
    [Parameter]
    public List<Monkey> Monkeys { get; set; } = [];

    private Monkey DialogData { get; set; } = new Monkey();

    private async Task AddMonkey()
    {
        var monkey = new Monkey();
        var dialog = await DialogService.ShowDialogAsync<AddMonkeyDialogComponent>(monkey,
            new DialogParameters
                {
                    Title = "Add a New Monkey",
                    PreventDismissOnOverlayClick = true,
                    PreventScroll = true
                });

        var result = await dialog.Result;
        if (!result.Cancelled && result.Data is not null)
        {
            DialogData = (Monkey)result.Data;
            var addMonkeyResult = await MonkeyService.AddMonkeyAsync(DialogData);
            Monkeys.Add(addMonkeyResult);
        }
    }
}

