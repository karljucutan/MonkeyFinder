@typeparam T
@inject PersistentComponentState _persistentComponentState
@implements IDisposable

@if (_state is not null)
    @ChildContent(_state)

@code {
    [Parameter, EditorRequired]
    public required RenderFragment<T> ChildContent { get; set; }

    [Parameter, EditorRequired]
    public required Func<Task<T>> GetState { get; set; }

    [Parameter, EditorRequired]
    public required string StateKey { get; set; }

    private T? _state;
    private PersistingComponentStateSubscription _subscription;
    protected override async Task OnInitializedAsync()
    {
        _subscription = _persistentComponentState.RegisterOnPersisting(SaveState);

        if (_persistentComponentState.TryTakeFromJson<T>(StateKey, out var storedState) && storedState != null)
        {
            _state = storedState;
        }
        else
        {
            _state = await GetState.Invoke();
        }

        await base.OnInitializedAsync();
    }

    private Task SaveState()
    {
        _persistentComponentState.PersistAsJson(StateKey, _state);
        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        _subscription.Dispose();
    }
}