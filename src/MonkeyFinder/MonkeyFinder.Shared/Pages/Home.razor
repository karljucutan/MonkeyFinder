@page "/"
@using MonkeyFinder.Shared.Components
@using MonkeyFinder.Shared.Components.Generics
@using MonkeyFinder.Shared.Models
@using MonkeyFinder.Shared.Services
@using MonkeyFinder.Shared.Services.Abstractions
@using System.Text.Json
@using MonkeyFinder.Shared.Extensions
@inject IFormFactor FormFactor
@inject IMonkeyService MonkeyService


@* On Init Count: @OnInitAsyncCounter
<h1>Hello, world!</h1>

Welcome to your new app running on <em>@factor</em> using <em>@platform</em>.

<h3>Render Info</h3>
<ul>
    <li>Name: @RendererInfo.Name</li>
    <li>Is Interactive: @RendererInfo.IsInteractive</li>
    <li>Assigned Render Mode: @AssignedRenderMode</li>
</ul> *@


@if (RendererInfo.IsWebViewRendering())
{
    <MonkeysComponent Monkeys="Monkeys"></MonkeysComponent>
}
else
{
    @* This <PersistentState> component is used to cache and persist the Monkey list state across Blazor prerendering and interactive phases.
        It prevents redundant API/data calls by storing the result from the initial server prerender so that
        on render mode switch it will try to get the data on PersistentComponentState if exists. *@
    <PersistentStateComponent GetState="LoadDataAsync" StateKey="MonkeyListData" Context="monkeysState">
        <MonkeysComponent Monkeys="monkeysState"></MonkeysComponent>
    </PersistentStateComponent>
}


@code {
    private string factor => FormFactor.GetFormFactor();
    private string platform => FormFactor.GetPlatform();

    private List<Monkey> Monkeys = new();
    private int OnInitAsyncCounter { get; set; } = 0;
    protected override async Task OnInitializedAsync()
    {
        // You will notice that OnInitializedAsync will be called twice pre-rendering and interactive phase. But, OnInitAsyncCounter will reset.
        // This is because the Blazor WebAssembly app is prerendered on the server and then rehydrated on the client.
        OnInitAsyncCounter++; 

        // If there is an api call here, it will call twice. But, with PersistentState component, it will try to get the data from the cache if exists else it will execute the GetState(Func).
       if (RendererInfo.IsWebViewRendering())
            Monkeys = await LoadDataAsync();
    }

    private async Task<List<Monkey>> LoadDataAsync()
    {
        Monkeys = await MonkeyService.GetMonkeysAsync();
        return Monkeys;
    }
}
