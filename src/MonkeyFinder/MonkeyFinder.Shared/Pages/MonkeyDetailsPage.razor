@page "/monkeydetails/{name}"
@using MonkeyFinder.Shared.Models.Map
@inject NavigationManager NavManager
@inject IMonkeyService MonkeyService
@inject INavigationService NavigationService
@inject IDialogService DialogService
@inject IMapService MapService
@inject MonkeyRatingState MonkeyRatingState

<div>
    <div class="detailscard-header">
        <button class="detailsback-button" @onclick="CloseWindow">&#8592;</button>
        <h1 class="detailstitle">@monkey.Name</h1>
    </div>
    <div class="detailscard-image">
        <img src="@monkey.Image">
        <h2 class="detailsimage-title">@monkey.Name</h2>
    </div>
    <div class="detailscard-body">
        <button class="detailsbutton-yellow" @onclick="OpenMap" >Show on Map</button>
        <button class="detailsbutton-yellow" @onclick="AddRating">Rate This Monkey!</button>
        <p class="detailsdescription">@monkey.Details</p>
        <p class="detailslocation"><strong>Location:</strong> @monkey.Location</p>
        <p class="detailspopulation"><strong>Population:</strong> @monkey.Population</p>
        <p class="detailsrating"><strong>Rating:</strong> @MonkeyRatingState.GetRating(monkey)</p>
    </div>
</div>

@code {

    [Parameter]
    public string Name { get; set; } = string.Empty;
    Monkey monkey { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        monkey = await MonkeyService.FindMonkeyByNameAsync(Name);

        MonkeyRatingState.OnRatingChanged += (_, _) =>
        {
            _ = InvokeAsync(() => StateHasChanged());
        };
    }

    private void CloseWindow()
    {
        NavManager.NavigateTo("/");
    }

    private async Task AddRating()
    {
        // Store the monkey in the shared state.
        MonkeyRatingState.SelectedMonkey = monkey;

        await NavigationService.NavigateToRatingPageAsync(MonkeyRatingState);
    }

    private async Task OpenMap()
    {
        try
        {
            if (MapService is null)
            {
                throw new Exception("No map service available.");
            }

            await MapService.OpenAsync(monkey.Latitude, monkey.Longitude, new MapLaunchOptions
                {
                    Name = monkey.Name,
                    NavigationMode = NavigationMode.None
                });
        }
        catch (Exception e)
        {
            await DialogService.ShowErrorAsync("Error", "Unable to open map.");
            Console.WriteLine(e.Message);
        }
    }
}